"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.isEmptyObject=exports.groupArrByKey=exports.formatTelNumber=exports.validateTelNumber=exports.formatMobileNumber=exports.validateMobileNumber=exports.removeCommas=exports.addCommas=void 0;function addCommas(num){if(arguments.length!==1){throw new Error("This function accepts exactly one argument")}if(typeof num!=="number"||isNaN(num)){throw new Error("Input must be a number")}if(!isFinite(num)){throw new Error("Input must be a finite number")}const parts=num.toString().split(".");parts[0]=parts[0].replace(/\B(?=(\d{3})+(?!\d))/g,",");return parts.join(".")}exports.addCommas=addCommas;function removeCommas(str){if(arguments.length!==1){throw new Error("This function accepts exactly one argument")}if(typeof str!=="string"){throw new Error("Input must be a string")}return str.replace(/,/g,"")}exports.removeCommas=removeCommas;function validateMobileNumber(phoneNumber){if(typeof phoneNumber!=="string"){throw new Error("Input must be a string")}const strippedNumber=phoneNumber.replace(/-/g,"");if(!/^\d+$/.test(strippedNumber)){throw new Error("Phone number should only contain digits")}if(strippedNumber.length<10||strippedNumber.length>11||strippedNumber.slice(0,3)!=="010"){throw new Error("Invalid phone number format")}return strippedNumber}exports.validateMobileNumber=validateMobileNumber;function formatMobileNumber(phoneNumber){if(typeof phoneNumber!=="string"){throw new Error("Input must be a string")}const strippedNumber=phoneNumber.replace(/-/g,"");if(!/^\d+$/.test(strippedNumber)){throw new Error("Phone number should only contain digits")}let formattedNumber;if(strippedNumber.length===10&&strippedNumber.startsWith("010")){formattedNumber=strippedNumber.replace(/(\d{3})(\d{3})(\d{4})/,"$1-$2-$3")}else if(strippedNumber.length===11&&strippedNumber.startsWith("010")){formattedNumber=strippedNumber.replace(/(\d{3})(\d{4})(\d{4})/,"$1-$2-$3")}else{throw new Error("Invalid mobile number format")}return formattedNumber}exports.formatMobileNumber=formatMobileNumber;function validateTelNumber(tel){if(typeof tel!=="string"){throw new Error("Input must be a string")}const strippedNumber=tel.replace(/-/g,"");if(!/^\d+$/.test(strippedNumber)){throw new Error("Phone number should only contain digits")}const len=strippedNumber.length;const prefix=strippedNumber.slice(0,2);if(prefix==="02"){if(len<9||len>10){throw new Error("Invalid phone number format for Seoul")}}else{if(len<10||len>11){throw new Error("Invalid phone number format for other regions")}}return strippedNumber}exports.validateTelNumber=validateTelNumber;function formatTelNumber(tel){if(typeof tel!=="string"){throw new Error("Input must be a string")}const stripped_number=tel.replace(/-/g,"");if(!/^\d+$/.test(stripped_number)){throw new Error("tel number should only contain digits")}let formatted_number;if(stripped_number.length===9&&stripped_number.startsWith("02")){formatted_number=stripped_number.replace(/(\d{2})(\d{3})(\d{4})/,"$1-$2-$3")}else if(stripped_number.length===10&&stripped_number.startsWith("02")){formatted_number=stripped_number.replace(/(\d{2})(\d{4})(\d{4})$/,"$1-$2-$3")}else if(stripped_number.length===10){formatted_number=stripped_number.replace(/(\d{3})(\d{3})(\d{4})$/,"$1-$2-$3")}else if(stripped_number.length===11){formatted_number=stripped_number.replace(/(\d{3})(\d{4})(\d{4})$/,"$1-$2-$3")}else{throw new Error("Invalid tel number format")}return formatted_number}exports.formatTelNumber=formatTelNumber;function groupArrByKey(objectArray,property){if(!Array.isArray(objectArray)){throw new Error("not array")}if(objectArray.length===0){throw new Error("empty array")}return objectArray.reduce((function(acc,obj){if(!obj.hasOwnProperty(property)){throw new Error("missing key")}let key=obj[property];if(!acc[key]){acc[key]=[]}acc[key].push(obj);return acc}),{})}exports.groupArrByKey=groupArrByKey;function isEmptyObject(obj){return Object.keys(obj).length===0&&obj.constructor===Object}exports.isEmptyObject=isEmptyObject;