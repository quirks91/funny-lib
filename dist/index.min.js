function addCommas(num){if(arguments.length!==1){throw new Error("This function accepts exactly one argument")}if(typeof num!=="number"||isNaN(num)){throw new Error("Input must be a number")}if(!isFinite(num)){throw new Error("Input must be a finite number")}const parts=num.toString().split(".");parts[0]=parts[0].replace(/\B(?=(\d{3})+(?!\d))/g,",");return parts.join(".")}function removeCommas(str){if(arguments.length!==1){throw new Error("This function accepts exactly one argument")}if(typeof str!=="string"){throw new Error("Input must be a string")}return str.replace(/,/g,"")}function validatePhoneNumber(phoneNumber){if(typeof phoneNumber!=="string"){throw new Error("Input must be a string")}const strippedNumber=phoneNumber.replace(/-/g,"");if(!/^\d+$/.test(strippedNumber)){throw new Error("Phone number should only contain digits")}if(strippedNumber.length<10||strippedNumber.length>11||strippedNumber.slice(0,3)!=="010"){throw new Error("Invalid phone number format")}return strippedNumber}function groupArrByKey(objectArray,property){if(!Array.isArray(objectArray)){throw new Error("not array")}if(objectArray.length===0){throw new Error("empty array")}return objectArray.reduce((function(acc,obj){if(!obj.hasOwnProperty(property)){throw new Error("missing key")}let key=obj[property];if(!acc[key]){acc[key]=[]}acc[key].push(obj);return acc}),{})}module.exports={addCommas:addCommas,removeCommas:removeCommas,validatePhoneNumber:validatePhoneNumber,groupArrByKey:groupArrByKey};